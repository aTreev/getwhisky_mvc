<?php 
namespace Getwhisky\Util;
/**
 * Unique ID generator, used as an extra security measure against sequential ID attacks,
 *
 * Use this class by first calling the properties() method and
 * then retrieving the uuid with the getUniqueId() function.
 */
class UniqueIdGenerator {
    
    
    private $existingIds = []; // Array of retrieved Ids
    private $length;            // Length of the uid
    private $UNIQUE_ID;         // final generated uid


    /**
     * Sets the initial properties required to generate a uuid.
     * 
     * @param array $ids array An array of IDs to check uniqueness
     * @param int $length  The size of uuid to generate
     * @return UniqueIdGenerator  Returns the object instance to allow method chaining
     */
    public function properties($ids, $length=20) {
        $this->setIdLength($length);
        $this->setExistingIds($ids);
        $this->generateNewUniqueId();

        return $this;
    }


    private function setIdLength($length) { $this->length = $length; }
    private function setExistingIds($existingIds) { $this->existingIds = $existingIds; }

    private function getLength() { return $this->length; }
    private function getExistingIds() { return $this->existingIds; }
    
    /**
     * Generates a unique id using the hexadecimal conversion of a random set of 20 bytes
     * loops through the retrievedIds array, using the column index, to check
     * if the id already exists in the table.
     * Once a unique id is generated the UNIQUE_ID instance variable is populated
     */
    private function generateNewUniqueId() {
        $uniqueId = "";
        do {
            $uniqueId = bin2hex(random_bytes($this->getLength()));
            $unique = 1;

            foreach($this->getExistingIds() as $id) {
                if ($uniqueId == $id) {
                    $unique = 0;
                    break;
                }
            }
        } while ($unique == 0);

        $this->UNIQUE_ID = $uniqueId;
    }


    /**
     * Returns the uuid generated by the class.
     */
    public function getUniqueId(): string {
        return $this->UNIQUE_ID;
    }
}
